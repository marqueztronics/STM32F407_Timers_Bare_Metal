
STM32F407_Timers_Bare_Metal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000009e0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000b68  08000b70  00001b70  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000b68  08000b68  00001b70  2**0
                  CONTENTS
  4 .ARM          00000000  08000b68  08000b68  00001b70  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000b68  08000b70  00001b70  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000b68  08000b68  00001b68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000b6c  08000b6c  00001b6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001b70  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00001b70  2**0
                  CONTENTS
 10 .bss          0000003c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000003c  2000003c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00001b70  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001186  00000000  00000000  00001b9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000003e4  00000000  00000000  00002d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000108  00000000  00000000  00003108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000b8  00000000  00000000  00003210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001ae3  00000000  00000000  000032c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001730  00000000  00000000  00004dab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00006453  00000000  00000000  000064db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0000c92e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000334  00000000  00000000  0000c974  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000082  00000000  00000000  0000cca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000b50 	.word	0x08000b50

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000b50 	.word	0x08000b50

080001c8 <GP_TIM_PeriClockControl>:
 * @return            - none
 *
 * @Note              - none
 */
void GP_TIM_PeriClockControl(GP_TIM_RegDef_t* pTIMx, uint8_t EnorDi)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	460b      	mov	r3, r1
 80001d2:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80001d4:	78fb      	ldrb	r3, [r7, #3]
 80001d6:	2b01      	cmp	r3, #1
 80001d8:	d12b      	bne.n	8000232 <GP_TIM_PeriClockControl+0x6a>
	{
		// ENABLE
		if (pTIMx == TIM2)
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80001e0:	d106      	bne.n	80001f0 <GP_TIM_PeriClockControl+0x28>
		{
			TIM2_PCLK_EN();
 80001e2:	4b2c      	ldr	r3, [pc, #176]	@ (8000294 <GP_TIM_PeriClockControl+0xcc>)
 80001e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80001e6:	4a2b      	ldr	r2, [pc, #172]	@ (8000294 <GP_TIM_PeriClockControl+0xcc>)
 80001e8:	f043 0301 	orr.w	r3, r3, #1
 80001ec:	6413      	str	r3, [r2, #64]	@ 0x40
		else if (pTIMx == TIM5)
		{
			TIM5_PCLK_DI();
		}
	}
}
 80001ee:	e04b      	b.n	8000288 <GP_TIM_PeriClockControl+0xc0>
		else if (pTIMx == TIM3)
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	4a29      	ldr	r2, [pc, #164]	@ (8000298 <GP_TIM_PeriClockControl+0xd0>)
 80001f4:	4293      	cmp	r3, r2
 80001f6:	d106      	bne.n	8000206 <GP_TIM_PeriClockControl+0x3e>
			TIM3_PCLK_EN();
 80001f8:	4b26      	ldr	r3, [pc, #152]	@ (8000294 <GP_TIM_PeriClockControl+0xcc>)
 80001fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80001fc:	4a25      	ldr	r2, [pc, #148]	@ (8000294 <GP_TIM_PeriClockControl+0xcc>)
 80001fe:	f043 0302 	orr.w	r3, r3, #2
 8000202:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000204:	e040      	b.n	8000288 <GP_TIM_PeriClockControl+0xc0>
		else if (pTIMx == TIM4)
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	4a24      	ldr	r2, [pc, #144]	@ (800029c <GP_TIM_PeriClockControl+0xd4>)
 800020a:	4293      	cmp	r3, r2
 800020c:	d106      	bne.n	800021c <GP_TIM_PeriClockControl+0x54>
			TIM4_PCLK_EN();
 800020e:	4b21      	ldr	r3, [pc, #132]	@ (8000294 <GP_TIM_PeriClockControl+0xcc>)
 8000210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000212:	4a20      	ldr	r2, [pc, #128]	@ (8000294 <GP_TIM_PeriClockControl+0xcc>)
 8000214:	f043 0304 	orr.w	r3, r3, #4
 8000218:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800021a:	e035      	b.n	8000288 <GP_TIM_PeriClockControl+0xc0>
		else if (pTIMx == TIM5)
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	4a20      	ldr	r2, [pc, #128]	@ (80002a0 <GP_TIM_PeriClockControl+0xd8>)
 8000220:	4293      	cmp	r3, r2
 8000222:	d131      	bne.n	8000288 <GP_TIM_PeriClockControl+0xc0>
			TIM5_PCLK_EN();
 8000224:	4b1b      	ldr	r3, [pc, #108]	@ (8000294 <GP_TIM_PeriClockControl+0xcc>)
 8000226:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000228:	4a1a      	ldr	r2, [pc, #104]	@ (8000294 <GP_TIM_PeriClockControl+0xcc>)
 800022a:	f043 0308 	orr.w	r3, r3, #8
 800022e:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000230:	e02a      	b.n	8000288 <GP_TIM_PeriClockControl+0xc0>
		if (pTIMx == TIM2)
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000238:	d106      	bne.n	8000248 <GP_TIM_PeriClockControl+0x80>
			TIM2_PCLK_DI();
 800023a:	4b16      	ldr	r3, [pc, #88]	@ (8000294 <GP_TIM_PeriClockControl+0xcc>)
 800023c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800023e:	4a15      	ldr	r2, [pc, #84]	@ (8000294 <GP_TIM_PeriClockControl+0xcc>)
 8000240:	f023 0301 	bic.w	r3, r3, #1
 8000244:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000246:	e01f      	b.n	8000288 <GP_TIM_PeriClockControl+0xc0>
		else if (pTIMx == TIM3)
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	4a13      	ldr	r2, [pc, #76]	@ (8000298 <GP_TIM_PeriClockControl+0xd0>)
 800024c:	4293      	cmp	r3, r2
 800024e:	d106      	bne.n	800025e <GP_TIM_PeriClockControl+0x96>
			TIM3_PCLK_DI();
 8000250:	4b10      	ldr	r3, [pc, #64]	@ (8000294 <GP_TIM_PeriClockControl+0xcc>)
 8000252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000254:	4a0f      	ldr	r2, [pc, #60]	@ (8000294 <GP_TIM_PeriClockControl+0xcc>)
 8000256:	f023 0302 	bic.w	r3, r3, #2
 800025a:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800025c:	e014      	b.n	8000288 <GP_TIM_PeriClockControl+0xc0>
		else if (pTIMx == TIM4)
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	4a0e      	ldr	r2, [pc, #56]	@ (800029c <GP_TIM_PeriClockControl+0xd4>)
 8000262:	4293      	cmp	r3, r2
 8000264:	d106      	bne.n	8000274 <GP_TIM_PeriClockControl+0xac>
			TIM4_PCLK_DI();
 8000266:	4b0b      	ldr	r3, [pc, #44]	@ (8000294 <GP_TIM_PeriClockControl+0xcc>)
 8000268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800026a:	4a0a      	ldr	r2, [pc, #40]	@ (8000294 <GP_TIM_PeriClockControl+0xcc>)
 800026c:	f023 0304 	bic.w	r3, r3, #4
 8000270:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000272:	e009      	b.n	8000288 <GP_TIM_PeriClockControl+0xc0>
		else if (pTIMx == TIM5)
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	4a0a      	ldr	r2, [pc, #40]	@ (80002a0 <GP_TIM_PeriClockControl+0xd8>)
 8000278:	4293      	cmp	r3, r2
 800027a:	d105      	bne.n	8000288 <GP_TIM_PeriClockControl+0xc0>
			TIM5_PCLK_DI();
 800027c:	4b05      	ldr	r3, [pc, #20]	@ (8000294 <GP_TIM_PeriClockControl+0xcc>)
 800027e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000280:	4a04      	ldr	r2, [pc, #16]	@ (8000294 <GP_TIM_PeriClockControl+0xcc>)
 8000282:	f023 0308 	bic.w	r3, r3, #8
 8000286:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000288:	bf00      	nop
 800028a:	370c      	adds	r7, #12
 800028c:	46bd      	mov	sp, r7
 800028e:	bc80      	pop	{r7}
 8000290:	4770      	bx	lr
 8000292:	bf00      	nop
 8000294:	40023800 	.word	0x40023800
 8000298:	40000400 	.word	0x40000400
 800029c:	40000800 	.word	0x40000800
 80002a0:	40000c00 	.word	0x40000c00

080002a4 <GP_TIM_Init>:
 * @return            - none
 *
 * @Note              - none
 */
void GP_TIM_Init(GP_TIM_Handle_t* pGP_TIM_Handle)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b082      	sub	sp, #8
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
	// Enable the peripheral clock
	GP_TIM_PeriClockControl(pGP_TIM_Handle->pTIMx, ENABLE);
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	2101      	movs	r1, #1
 80002b2:	4618      	mov	r0, r3
 80002b4:	f7ff ff88 	bl	80001c8 <GP_TIM_PeriClockControl>

	// Select clock source
	if (pGP_TIM_Handle->TIMConfig.ClockSource == GP_TIM_CK_INT)
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	791b      	ldrb	r3, [r3, #4]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d107      	bne.n	80002d0 <GP_TIM_Init+0x2c>
	{
		// Internal Clock
		// Set SMS=000 in the TIMx_SMCR register
		pGP_TIM_Handle->pTIMx->SMCR &= ~(0x7 << GP_TIM_SMCR_SMS);
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	689a      	ldr	r2, [r3, #8]
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	f022 0207 	bic.w	r2, r2, #7
 80002ce:	609a      	str	r2, [r3, #8]
	{
		// TODO
	}

	// Set pre-scaler
	pGP_TIM_Handle->pTIMx->PSC = pGP_TIM_Handle->TIMConfig.Prescaler;
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	88da      	ldrh	r2, [r3, #6]
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	629a      	str	r2, [r3, #40]	@ 0x28

	// Set Period (ARR)
	pGP_TIM_Handle->pTIMx->ARR = pGP_TIM_Handle->TIMConfig.Autorealod;
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	687a      	ldr	r2, [r7, #4]
 80002e0:	6892      	ldr	r2, [r2, #8]
 80002e2:	62da      	str	r2, [r3, #44]	@ 0x2c

	// Select timer mode
	if (pGP_TIM_Handle->TIMConfig.TimerMode == GP_TIM_MODE_PWM)
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	7b1b      	ldrb	r3, [r3, #12]
 80002e8:	2b01      	cmp	r3, #1
 80002ea:	f040 80fd 	bne.w	80004e8 <GP_TIM_Init+0x244>
	{
		// PWM mode

		// Select channel
		switch (pGP_TIM_Handle->TIMConfig.Channel)
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	7b9b      	ldrb	r3, [r3, #14]
 80002f2:	2b03      	cmp	r3, #3
 80002f4:	f200 80e8 	bhi.w	80004c8 <GP_TIM_Init+0x224>
 80002f8:	a201      	add	r2, pc, #4	@ (adr r2, 8000300 <GP_TIM_Init+0x5c>)
 80002fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002fe:	bf00      	nop
 8000300:	08000311 	.word	0x08000311
 8000304:	0800037f 	.word	0x0800037f
 8000308:	080003ed 	.word	0x080003ed
 800030c:	0800045b 	.word	0x0800045b
		{
		case GP_TIM_CHAN_1:
			// Write Pulse value into CCR1 register Register
			pGP_TIM_Handle->pTIMx->CCR1 = pGP_TIM_Handle->TIMConfig.Pulse;
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	687a      	ldr	r2, [r7, #4]
 8000316:	6912      	ldr	r2, [r2, #16]
 8000318:	635a      	str	r2, [r3, #52]	@ 0x34

			// Select PWM mode by writing OC1M bits in the TIMx_CCMR1 register
			pGP_TIM_Handle->pTIMx->CCMR1 &= ~(0x7 << GP_TIM_CCMR1_OC1M);	// Clear bits
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	699a      	ldr	r2, [r3, #24]
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8000328:	619a      	str	r2, [r3, #24]

			if (pGP_TIM_Handle->TIMConfig.PWMMode == GP_TIM_PWM_MODE_1)
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	7bdb      	ldrb	r3, [r3, #15]
 800032e:	2b00      	cmp	r3, #0
 8000330:	d108      	bne.n	8000344 <GP_TIM_Init+0xa0>
			{
				pGP_TIM_Handle->pTIMx->CCMR1 |= (0x6 << GP_TIM_CCMR1_OC1M);	// Write "110"
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	699a      	ldr	r2, [r3, #24]
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8000340:	619a      	str	r2, [r3, #24]
 8000342:	e00b      	b.n	800035c <GP_TIM_Init+0xb8>
			}
			else if (pGP_TIM_Handle->TIMConfig.PWMMode == GP_TIM_PWM_MODE_2)
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	7bdb      	ldrb	r3, [r3, #15]
 8000348:	2b01      	cmp	r3, #1
 800034a:	d107      	bne.n	800035c <GP_TIM_Init+0xb8>
			{
				pGP_TIM_Handle->pTIMx->CCMR1 |= (0x7 << GP_TIM_CCMR1_OC1M);	// Write "111"
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	699a      	ldr	r2, [r3, #24]
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	f042 0270 	orr.w	r2, r2, #112	@ 0x70
 800035a:	619a      	str	r2, [r3, #24]
			}

			// Enable the capture/compare preload register by setting the OC1PE bit in the TIMx_CCMR1 register
			pGP_TIM_Handle->pTIMx->CCMR1 |= (1 << GP_TIM_CCMR1_OC1PE);
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	699a      	ldr	r2, [r3, #24]
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	f042 0208 	orr.w	r2, r2, #8
 800036a:	619a      	str	r2, [r3, #24]

			// C1 output is enabled by the CC1E bit in the TIMx_CCER register
			pGP_TIM_Handle->pTIMx->CCER |= (1 << GP_TIM_CCER_CC1E);
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	6a1a      	ldr	r2, [r3, #32]
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	f042 0201 	orr.w	r2, r2, #1
 800037a:	621a      	str	r2, [r3, #32]

			break;
 800037c:	e0a4      	b.n	80004c8 <GP_TIM_Init+0x224>

		case GP_TIM_CHAN_2:
			// Write Pulse value into CCR2 register Register
			pGP_TIM_Handle->pTIMx->CCR2 = pGP_TIM_Handle->TIMConfig.Pulse;
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	687a      	ldr	r2, [r7, #4]
 8000384:	6912      	ldr	r2, [r2, #16]
 8000386:	639a      	str	r2, [r3, #56]	@ 0x38

			// Select PWM mode by writing OC2M bits in the TIMx_CCMR1 register
			pGP_TIM_Handle->pTIMx->CCMR1 &= ~(0x7 << GP_TIM_CCMR1_OC2M);	// Clear bits
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	699a      	ldr	r2, [r3, #24]
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8000396:	619a      	str	r2, [r3, #24]

			if (pGP_TIM_Handle->TIMConfig.PWMMode == GP_TIM_PWM_MODE_1)
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	7bdb      	ldrb	r3, [r3, #15]
 800039c:	2b00      	cmp	r3, #0
 800039e:	d108      	bne.n	80003b2 <GP_TIM_Init+0x10e>
			{
				pGP_TIM_Handle->pTIMx->CCMR1 |= (0x6 << GP_TIM_CCMR1_OC2M);	// Write "110"
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	699a      	ldr	r2, [r3, #24]
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	f442 42c0 	orr.w	r2, r2, #24576	@ 0x6000
 80003ae:	619a      	str	r2, [r3, #24]
 80003b0:	e00b      	b.n	80003ca <GP_TIM_Init+0x126>
			}
			else if (pGP_TIM_Handle->TIMConfig.PWMMode == GP_TIM_PWM_MODE_2)
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	7bdb      	ldrb	r3, [r3, #15]
 80003b6:	2b01      	cmp	r3, #1
 80003b8:	d107      	bne.n	80003ca <GP_TIM_Init+0x126>
			{
				pGP_TIM_Handle->pTIMx->CCMR1 |= (0x7 << GP_TIM_CCMR1_OC2M);	// Write "111"
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	699a      	ldr	r2, [r3, #24]
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	f442 42e0 	orr.w	r2, r2, #28672	@ 0x7000
 80003c8:	619a      	str	r2, [r3, #24]
			}

			// Enable the capture/compare preload register by setting the OC1PE bit in the TIMx_CCMR1 register
			pGP_TIM_Handle->pTIMx->CCMR1 |= (1 << GP_TIM_CCMR1_OC2PE);
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	699a      	ldr	r2, [r3, #24]
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80003d8:	619a      	str	r2, [r3, #24]

			// C2 output is enabled by the CC2E bit in the TIMx_CCER register
			pGP_TIM_Handle->pTIMx->CCER |= (1 << GP_TIM_CCER_CC2E);
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	6a1a      	ldr	r2, [r3, #32]
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	f042 0210 	orr.w	r2, r2, #16
 80003e8:	621a      	str	r2, [r3, #32]

			break;
 80003ea:	e06d      	b.n	80004c8 <GP_TIM_Init+0x224>

		case GP_TIM_CHAN_3:
			// Write Pulse value into CCR3 register Register
			pGP_TIM_Handle->pTIMx->CCR3 = pGP_TIM_Handle->TIMConfig.Pulse;
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	687a      	ldr	r2, [r7, #4]
 80003f2:	6912      	ldr	r2, [r2, #16]
 80003f4:	63da      	str	r2, [r3, #60]	@ 0x3c

			// Select PWM mode by writing OC3M bits in the TIMx_CCMR2 register
			pGP_TIM_Handle->pTIMx->CCMR2 &= ~(0x7 << GP_TIM_CCMR2_OC3M);	// Clear bits
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	69da      	ldr	r2, [r3, #28]
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8000404:	61da      	str	r2, [r3, #28]

			if (pGP_TIM_Handle->TIMConfig.PWMMode == GP_TIM_PWM_MODE_1)
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	7bdb      	ldrb	r3, [r3, #15]
 800040a:	2b00      	cmp	r3, #0
 800040c:	d108      	bne.n	8000420 <GP_TIM_Init+0x17c>
			{
				pGP_TIM_Handle->pTIMx->CCMR2 |= (0x6 << GP_TIM_CCMR2_OC3M);	// Write "110"
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	69da      	ldr	r2, [r3, #28]
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800041c:	61da      	str	r2, [r3, #28]
 800041e:	e00b      	b.n	8000438 <GP_TIM_Init+0x194>
			}
			else if (pGP_TIM_Handle->TIMConfig.PWMMode == GP_TIM_PWM_MODE_2)
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	7bdb      	ldrb	r3, [r3, #15]
 8000424:	2b01      	cmp	r3, #1
 8000426:	d107      	bne.n	8000438 <GP_TIM_Init+0x194>
			{
				pGP_TIM_Handle->pTIMx->CCMR2 |= (0x7 << GP_TIM_CCMR2_OC3M);	// Write "111"
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	69da      	ldr	r2, [r3, #28]
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	f042 0270 	orr.w	r2, r2, #112	@ 0x70
 8000436:	61da      	str	r2, [r3, #28]
			}

			// Enable the capture/compare preload register by setting the OC3PE bit in the TIMx_CCMR1 register
			pGP_TIM_Handle->pTIMx->CCMR2 |= (1 << GP_TIM_CCMR2_OC3PE);
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	69da      	ldr	r2, [r3, #28]
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	f042 0208 	orr.w	r2, r2, #8
 8000446:	61da      	str	r2, [r3, #28]

			// C3 output is enabled by the CC3E bit in the TIMx_CCER register
			pGP_TIM_Handle->pTIMx->CCER |= (1 << GP_TIM_CCER_CC3E);
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	6a1a      	ldr	r2, [r3, #32]
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000456:	621a      	str	r2, [r3, #32]

			break;
 8000458:	e036      	b.n	80004c8 <GP_TIM_Init+0x224>

		case GP_TIM_CHAN_4:
			// Write Pulse value into CCR4 register Register
			pGP_TIM_Handle->pTIMx->CCR4 = pGP_TIM_Handle->TIMConfig.Pulse;
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	687a      	ldr	r2, [r7, #4]
 8000460:	6912      	ldr	r2, [r2, #16]
 8000462:	641a      	str	r2, [r3, #64]	@ 0x40

			// Select PWM mode by writing OC4M bits in the TIMx_CCMR2 register
			pGP_TIM_Handle->pTIMx->CCMR2 &= ~(0x7 << GP_TIM_CCMR2_OC4M);	// Clear bits
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	69da      	ldr	r2, [r3, #28]
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8000472:	61da      	str	r2, [r3, #28]

			if (pGP_TIM_Handle->TIMConfig.PWMMode == GP_TIM_PWM_MODE_1)
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	7bdb      	ldrb	r3, [r3, #15]
 8000478:	2b00      	cmp	r3, #0
 800047a:	d108      	bne.n	800048e <GP_TIM_Init+0x1ea>
			{
				pGP_TIM_Handle->pTIMx->CCMR2 |= (0x6 << GP_TIM_CCMR2_OC4M);	// Write "110"
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	69da      	ldr	r2, [r3, #28]
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	f442 42c0 	orr.w	r2, r2, #24576	@ 0x6000
 800048a:	61da      	str	r2, [r3, #28]
 800048c:	e00b      	b.n	80004a6 <GP_TIM_Init+0x202>
			}
			else if (pGP_TIM_Handle->TIMConfig.PWMMode == GP_TIM_PWM_MODE_2)
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	7bdb      	ldrb	r3, [r3, #15]
 8000492:	2b01      	cmp	r3, #1
 8000494:	d107      	bne.n	80004a6 <GP_TIM_Init+0x202>
			{
				pGP_TIM_Handle->pTIMx->CCMR2 |= (0x7 << GP_TIM_CCMR2_OC4M);	// Write "111"
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	69da      	ldr	r2, [r3, #28]
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	f442 42e0 	orr.w	r2, r2, #28672	@ 0x7000
 80004a4:	61da      	str	r2, [r3, #28]
			}

			// Enable the capture/compare preload register by setting the OC3PE bit in the TIMx_CCMR1 register
			pGP_TIM_Handle->pTIMx->CCMR2 |= (1 << GP_TIM_CCMR2_OC4PE);
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	69da      	ldr	r2, [r3, #28]
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80004b4:	61da      	str	r2, [r3, #28]

			// C4 output is enabled by the CC4E bit in the TIMx_CCER register
			pGP_TIM_Handle->pTIMx->CCER |= (1 << GP_TIM_CCER_CC4E);
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	6a1a      	ldr	r2, [r3, #32]
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80004c4:	621a      	str	r2, [r3, #32]
			break;
 80004c6:	bf00      	nop
		}

		// Set the ARPE bit in the TIMx_CR1 register
		pGP_TIM_Handle->pTIMx->CR1 |= (1 << GP_TIM_CR1_ARPE);
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	681a      	ldr	r2, [r3, #0]
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80004d6:	601a      	str	r2, [r3, #0]

		// Initialize all the registers by setting the UG bit in the TIMx_EGR register
		pGP_TIM_Handle->pTIMx->EGR |= (1 << GP_TIM_EGR_UG);
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	695a      	ldr	r2, [r3, #20]
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	f042 0201 	orr.w	r2, r2, #1
 80004e6:	615a      	str	r2, [r3, #20]
	}
}
 80004e8:	bf00      	nop
 80004ea:	3708      	adds	r7, #8
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}

080004f0 <GP_TIM_Start>:
 * @return            - none
 *
 * @Note              - none
 */
void GP_TIM_Start(GP_TIM_Handle_t* pGP_TIM_Handle)
{
 80004f0:	b480      	push	{r7}
 80004f2:	b083      	sub	sp, #12
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
	// Set TIMx_CR1 CEN bit
	pGP_TIM_Handle->pTIMx->CR1 |= (1 << GP_TIM_CR1_CEN);
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	681a      	ldr	r2, [r3, #0]
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	f042 0201 	orr.w	r2, r2, #1
 8000506:	601a      	str	r2, [r3, #0]
}
 8000508:	bf00      	nop
 800050a:	370c      	adds	r7, #12
 800050c:	46bd      	mov	sp, r7
 800050e:	bc80      	pop	{r7}
 8000510:	4770      	bx	lr
	...

08000514 <GP_TIM_SetPWMPulseWidth>:
 * @return            - none
 *
 * @Note              - none
 */
void GP_TIM_SetPWMPulseWidth(GP_TIM_Handle_t* pGP_TIM_Handle, uint32_t pulse)
{
 8000514:	b480      	push	{r7}
 8000516:	b083      	sub	sp, #12
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
 800051c:	6039      	str	r1, [r7, #0]
	// Select channel
	switch (pGP_TIM_Handle->TIMConfig.Channel)
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	7b9b      	ldrb	r3, [r3, #14]
 8000522:	2b03      	cmp	r3, #3
 8000524:	d81e      	bhi.n	8000564 <GP_TIM_SetPWMPulseWidth+0x50>
 8000526:	a201      	add	r2, pc, #4	@ (adr r2, 800052c <GP_TIM_SetPWMPulseWidth+0x18>)
 8000528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800052c:	0800053d 	.word	0x0800053d
 8000530:	08000547 	.word	0x08000547
 8000534:	08000551 	.word	0x08000551
 8000538:	0800055b 	.word	0x0800055b
	{
	case GP_TIM_CHAN_1:
		// Write Pulse value into CCR1 register Register
		pGP_TIM_Handle->pTIMx->CCR1 = pulse;
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	683a      	ldr	r2, [r7, #0]
 8000542:	635a      	str	r2, [r3, #52]	@ 0x34
		break;
 8000544:	e00e      	b.n	8000564 <GP_TIM_SetPWMPulseWidth+0x50>
	case GP_TIM_CHAN_2:
		// Write Pulse value into CCR2 register Register
		pGP_TIM_Handle->pTIMx->CCR2 = pulse;
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	683a      	ldr	r2, [r7, #0]
 800054c:	639a      	str	r2, [r3, #56]	@ 0x38
		break;
 800054e:	e009      	b.n	8000564 <GP_TIM_SetPWMPulseWidth+0x50>
	case GP_TIM_CHAN_3:
		// Write Pulse value into CCR3 register Register
		pGP_TIM_Handle->pTIMx->CCR3 = pulse;
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	683a      	ldr	r2, [r7, #0]
 8000556:	63da      	str	r2, [r3, #60]	@ 0x3c
		break;
 8000558:	e004      	b.n	8000564 <GP_TIM_SetPWMPulseWidth+0x50>
	case GP_TIM_CHAN_4:
		// Write Pulse value into CCR4 register Register
		pGP_TIM_Handle->pTIMx->CCR4 = pulse;
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	683a      	ldr	r2, [r7, #0]
 8000560:	641a      	str	r2, [r3, #64]	@ 0x40
		break;
 8000562:	bf00      	nop
	}

}
 8000564:	bf00      	nop
 8000566:	370c      	adds	r7, #12
 8000568:	46bd      	mov	sp, r7
 800056a:	bc80      	pop	{r7}
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <GPIO_PeriClockControl>:
 *
 * @Note              -  none

 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
 8000578:	460b      	mov	r3, r1
 800057a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 800057c:	78fb      	ldrb	r3, [r7, #3]
 800057e:	2b01      	cmp	r3, #1
 8000580:	d161      	bne.n	8000646 <GPIO_PeriClockControl+0xd6>
	{
		if(pGPIOx == GPIOA)
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	4a32      	ldr	r2, [pc, #200]	@ (8000650 <GPIO_PeriClockControl+0xe0>)
 8000586:	4293      	cmp	r3, r2
 8000588:	d106      	bne.n	8000598 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 800058a:	4b32      	ldr	r3, [pc, #200]	@ (8000654 <GPIO_PeriClockControl+0xe4>)
 800058c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800058e:	4a31      	ldr	r2, [pc, #196]	@ (8000654 <GPIO_PeriClockControl+0xe4>)
 8000590:	f043 0301 	orr.w	r3, r3, #1
 8000594:	6313      	str	r3, [r2, #48]	@ 0x30
	else
	{
		//TODO
	}

}
 8000596:	e056      	b.n	8000646 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOB)
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	4a2f      	ldr	r2, [pc, #188]	@ (8000658 <GPIO_PeriClockControl+0xe8>)
 800059c:	4293      	cmp	r3, r2
 800059e:	d106      	bne.n	80005ae <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80005a0:	4b2c      	ldr	r3, [pc, #176]	@ (8000654 <GPIO_PeriClockControl+0xe4>)
 80005a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005a4:	4a2b      	ldr	r2, [pc, #172]	@ (8000654 <GPIO_PeriClockControl+0xe4>)
 80005a6:	f043 0302 	orr.w	r3, r3, #2
 80005aa:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80005ac:	e04b      	b.n	8000646 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOC)
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	4a2a      	ldr	r2, [pc, #168]	@ (800065c <GPIO_PeriClockControl+0xec>)
 80005b2:	4293      	cmp	r3, r2
 80005b4:	d106      	bne.n	80005c4 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80005b6:	4b27      	ldr	r3, [pc, #156]	@ (8000654 <GPIO_PeriClockControl+0xe4>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ba:	4a26      	ldr	r2, [pc, #152]	@ (8000654 <GPIO_PeriClockControl+0xe4>)
 80005bc:	f043 0304 	orr.w	r3, r3, #4
 80005c0:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80005c2:	e040      	b.n	8000646 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOD)
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	4a26      	ldr	r2, [pc, #152]	@ (8000660 <GPIO_PeriClockControl+0xf0>)
 80005c8:	4293      	cmp	r3, r2
 80005ca:	d106      	bne.n	80005da <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 80005cc:	4b21      	ldr	r3, [pc, #132]	@ (8000654 <GPIO_PeriClockControl+0xe4>)
 80005ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005d0:	4a20      	ldr	r2, [pc, #128]	@ (8000654 <GPIO_PeriClockControl+0xe4>)
 80005d2:	f043 0308 	orr.w	r3, r3, #8
 80005d6:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80005d8:	e035      	b.n	8000646 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOE)
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	4a21      	ldr	r2, [pc, #132]	@ (8000664 <GPIO_PeriClockControl+0xf4>)
 80005de:	4293      	cmp	r3, r2
 80005e0:	d106      	bne.n	80005f0 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 80005e2:	4b1c      	ldr	r3, [pc, #112]	@ (8000654 <GPIO_PeriClockControl+0xe4>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e6:	4a1b      	ldr	r2, [pc, #108]	@ (8000654 <GPIO_PeriClockControl+0xe4>)
 80005e8:	f043 0310 	orr.w	r3, r3, #16
 80005ec:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80005ee:	e02a      	b.n	8000646 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOF)
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	4a1d      	ldr	r2, [pc, #116]	@ (8000668 <GPIO_PeriClockControl+0xf8>)
 80005f4:	4293      	cmp	r3, r2
 80005f6:	d106      	bne.n	8000606 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 80005f8:	4b16      	ldr	r3, [pc, #88]	@ (8000654 <GPIO_PeriClockControl+0xe4>)
 80005fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005fc:	4a15      	ldr	r2, [pc, #84]	@ (8000654 <GPIO_PeriClockControl+0xe4>)
 80005fe:	f043 0320 	orr.w	r3, r3, #32
 8000602:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000604:	e01f      	b.n	8000646 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOG)
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	4a18      	ldr	r2, [pc, #96]	@ (800066c <GPIO_PeriClockControl+0xfc>)
 800060a:	4293      	cmp	r3, r2
 800060c:	d106      	bne.n	800061c <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 800060e:	4b11      	ldr	r3, [pc, #68]	@ (8000654 <GPIO_PeriClockControl+0xe4>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000612:	4a10      	ldr	r2, [pc, #64]	@ (8000654 <GPIO_PeriClockControl+0xe4>)
 8000614:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000618:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800061a:	e014      	b.n	8000646 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOH)
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	4a14      	ldr	r2, [pc, #80]	@ (8000670 <GPIO_PeriClockControl+0x100>)
 8000620:	4293      	cmp	r3, r2
 8000622:	d106      	bne.n	8000632 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000624:	4b0b      	ldr	r3, [pc, #44]	@ (8000654 <GPIO_PeriClockControl+0xe4>)
 8000626:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000628:	4a0a      	ldr	r2, [pc, #40]	@ (8000654 <GPIO_PeriClockControl+0xe4>)
 800062a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800062e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000630:	e009      	b.n	8000646 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOI)
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	4a0f      	ldr	r2, [pc, #60]	@ (8000674 <GPIO_PeriClockControl+0x104>)
 8000636:	4293      	cmp	r3, r2
 8000638:	d105      	bne.n	8000646 <GPIO_PeriClockControl+0xd6>
			GPIOI_PCLK_EN();
 800063a:	4b06      	ldr	r3, [pc, #24]	@ (8000654 <GPIO_PeriClockControl+0xe4>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800063e:	4a05      	ldr	r2, [pc, #20]	@ (8000654 <GPIO_PeriClockControl+0xe4>)
 8000640:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000644:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000646:	bf00      	nop
 8000648:	370c      	adds	r7, #12
 800064a:	46bd      	mov	sp, r7
 800064c:	bc80      	pop	{r7}
 800064e:	4770      	bx	lr
 8000650:	40020000 	.word	0x40020000
 8000654:	40023800 	.word	0x40023800
 8000658:	40020400 	.word	0x40020400
 800065c:	40020800 	.word	0x40020800
 8000660:	40020c00 	.word	0x40020c00
 8000664:	40021000 	.word	0x40021000
 8000668:	40021400 	.word	0x40021400
 800066c:	40021800 	.word	0x40021800
 8000670:	40021c00 	.word	0x40021c00
 8000674:	40022000 	.word	0x40022000

08000678 <GPIO_Init>:
 *
 * @Note              -

 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b086      	sub	sp, #24
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
	 uint32_t temp=0; //temp. register
 8000680:	2300      	movs	r3, #0
 8000682:	617b      	str	r3, [r7, #20]

	 //enable the peripheral clock

	 GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	2101      	movs	r1, #1
 800068a:	4618      	mov	r0, r3
 800068c:	f7ff ff70 	bl	8000570 <GPIO_PeriClockControl>

	//1 . configure the mode of gpio pin

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	795b      	ldrb	r3, [r3, #5]
 8000694:	2b03      	cmp	r3, #3
 8000696:	d820      	bhi.n	80006da <GPIO_Init+0x62>
	{
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	795b      	ldrb	r3, [r3, #5]
 800069c:	461a      	mov	r2, r3
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	791b      	ldrb	r3, [r3, #4]
 80006a2:	005b      	lsls	r3, r3, #1
 80006a4:	fa02 f303 	lsl.w	r3, r2, r3
 80006a8:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	681a      	ldr	r2, [r3, #0]
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	791b      	ldrb	r3, [r3, #4]
 80006b4:	005b      	lsls	r3, r3, #1
 80006b6:	2103      	movs	r1, #3
 80006b8:	fa01 f303 	lsl.w	r3, r1, r3
 80006bc:	43db      	mvns	r3, r3
 80006be:	4619      	mov	r1, r3
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	400a      	ands	r2, r1
 80006c6:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	6819      	ldr	r1, [r3, #0]
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	697a      	ldr	r2, [r7, #20]
 80006d4:	430a      	orrs	r2, r1
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	e0cb      	b.n	8000872 <GPIO_Init+0x1fa>

	}else
	{
		//this part will code later . ( interrupt mode)
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_FT )
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	795b      	ldrb	r3, [r3, #5]
 80006de:	2b04      	cmp	r3, #4
 80006e0:	d117      	bne.n	8000712 <GPIO_Init+0x9a>
		{
			//1. configure the FTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006e2:	4b4b      	ldr	r3, [pc, #300]	@ (8000810 <GPIO_Init+0x198>)
 80006e4:	68db      	ldr	r3, [r3, #12]
 80006e6:	687a      	ldr	r2, [r7, #4]
 80006e8:	7912      	ldrb	r2, [r2, #4]
 80006ea:	4611      	mov	r1, r2
 80006ec:	2201      	movs	r2, #1
 80006ee:	408a      	lsls	r2, r1
 80006f0:	4611      	mov	r1, r2
 80006f2:	4a47      	ldr	r2, [pc, #284]	@ (8000810 <GPIO_Init+0x198>)
 80006f4:	430b      	orrs	r3, r1
 80006f6:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006f8:	4b45      	ldr	r3, [pc, #276]	@ (8000810 <GPIO_Init+0x198>)
 80006fa:	689b      	ldr	r3, [r3, #8]
 80006fc:	687a      	ldr	r2, [r7, #4]
 80006fe:	7912      	ldrb	r2, [r2, #4]
 8000700:	4611      	mov	r1, r2
 8000702:	2201      	movs	r2, #1
 8000704:	408a      	lsls	r2, r1
 8000706:	43d2      	mvns	r2, r2
 8000708:	4611      	mov	r1, r2
 800070a:	4a41      	ldr	r2, [pc, #260]	@ (8000810 <GPIO_Init+0x198>)
 800070c:	400b      	ands	r3, r1
 800070e:	6093      	str	r3, [r2, #8]
 8000710:	e035      	b.n	800077e <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_RT )
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	795b      	ldrb	r3, [r3, #5]
 8000716:	2b05      	cmp	r3, #5
 8000718:	d117      	bne.n	800074a <GPIO_Init+0xd2>
		{
			//1 . configure the RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800071a:	4b3d      	ldr	r3, [pc, #244]	@ (8000810 <GPIO_Init+0x198>)
 800071c:	689b      	ldr	r3, [r3, #8]
 800071e:	687a      	ldr	r2, [r7, #4]
 8000720:	7912      	ldrb	r2, [r2, #4]
 8000722:	4611      	mov	r1, r2
 8000724:	2201      	movs	r2, #1
 8000726:	408a      	lsls	r2, r1
 8000728:	4611      	mov	r1, r2
 800072a:	4a39      	ldr	r2, [pc, #228]	@ (8000810 <GPIO_Init+0x198>)
 800072c:	430b      	orrs	r3, r1
 800072e:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000730:	4b37      	ldr	r3, [pc, #220]	@ (8000810 <GPIO_Init+0x198>)
 8000732:	68db      	ldr	r3, [r3, #12]
 8000734:	687a      	ldr	r2, [r7, #4]
 8000736:	7912      	ldrb	r2, [r2, #4]
 8000738:	4611      	mov	r1, r2
 800073a:	2201      	movs	r2, #1
 800073c:	408a      	lsls	r2, r1
 800073e:	43d2      	mvns	r2, r2
 8000740:	4611      	mov	r1, r2
 8000742:	4a33      	ldr	r2, [pc, #204]	@ (8000810 <GPIO_Init+0x198>)
 8000744:	400b      	ands	r3, r1
 8000746:	60d3      	str	r3, [r2, #12]
 8000748:	e019      	b.n	800077e <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT )
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	795b      	ldrb	r3, [r3, #5]
 800074e:	2b06      	cmp	r3, #6
 8000750:	d115      	bne.n	800077e <GPIO_Init+0x106>
		{
			//1. configure both FTSR and RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000752:	4b2f      	ldr	r3, [pc, #188]	@ (8000810 <GPIO_Init+0x198>)
 8000754:	689b      	ldr	r3, [r3, #8]
 8000756:	687a      	ldr	r2, [r7, #4]
 8000758:	7912      	ldrb	r2, [r2, #4]
 800075a:	4611      	mov	r1, r2
 800075c:	2201      	movs	r2, #1
 800075e:	408a      	lsls	r2, r1
 8000760:	4611      	mov	r1, r2
 8000762:	4a2b      	ldr	r2, [pc, #172]	@ (8000810 <GPIO_Init+0x198>)
 8000764:	430b      	orrs	r3, r1
 8000766:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000768:	4b29      	ldr	r3, [pc, #164]	@ (8000810 <GPIO_Init+0x198>)
 800076a:	68db      	ldr	r3, [r3, #12]
 800076c:	687a      	ldr	r2, [r7, #4]
 800076e:	7912      	ldrb	r2, [r2, #4]
 8000770:	4611      	mov	r1, r2
 8000772:	2201      	movs	r2, #1
 8000774:	408a      	lsls	r2, r1
 8000776:	4611      	mov	r1, r2
 8000778:	4a25      	ldr	r2, [pc, #148]	@ (8000810 <GPIO_Init+0x198>)
 800077a:	430b      	orrs	r3, r1
 800077c:	60d3      	str	r3, [r2, #12]
		}

		//2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4 ;
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	791b      	ldrb	r3, [r3, #4]
 8000782:	089b      	lsrs	r3, r3, #2
 8000784:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	791b      	ldrb	r3, [r3, #4]
 800078a:	f003 0303 	and.w	r3, r3, #3
 800078e:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4a1f      	ldr	r2, [pc, #124]	@ (8000814 <GPIO_Init+0x19c>)
 8000796:	4293      	cmp	r3, r2
 8000798:	d04e      	beq.n	8000838 <GPIO_Init+0x1c0>
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	4a1e      	ldr	r2, [pc, #120]	@ (8000818 <GPIO_Init+0x1a0>)
 80007a0:	4293      	cmp	r3, r2
 80007a2:	d032      	beq.n	800080a <GPIO_Init+0x192>
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a1c      	ldr	r2, [pc, #112]	@ (800081c <GPIO_Init+0x1a4>)
 80007aa:	4293      	cmp	r3, r2
 80007ac:	d02b      	beq.n	8000806 <GPIO_Init+0x18e>
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	4a1b      	ldr	r2, [pc, #108]	@ (8000820 <GPIO_Init+0x1a8>)
 80007b4:	4293      	cmp	r3, r2
 80007b6:	d024      	beq.n	8000802 <GPIO_Init+0x18a>
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a19      	ldr	r2, [pc, #100]	@ (8000824 <GPIO_Init+0x1ac>)
 80007be:	4293      	cmp	r3, r2
 80007c0:	d01d      	beq.n	80007fe <GPIO_Init+0x186>
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	4a18      	ldr	r2, [pc, #96]	@ (8000828 <GPIO_Init+0x1b0>)
 80007c8:	4293      	cmp	r3, r2
 80007ca:	d016      	beq.n	80007fa <GPIO_Init+0x182>
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a16      	ldr	r2, [pc, #88]	@ (800082c <GPIO_Init+0x1b4>)
 80007d2:	4293      	cmp	r3, r2
 80007d4:	d00f      	beq.n	80007f6 <GPIO_Init+0x17e>
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	4a15      	ldr	r2, [pc, #84]	@ (8000830 <GPIO_Init+0x1b8>)
 80007dc:	4293      	cmp	r3, r2
 80007de:	d008      	beq.n	80007f2 <GPIO_Init+0x17a>
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4a13      	ldr	r2, [pc, #76]	@ (8000834 <GPIO_Init+0x1bc>)
 80007e6:	4293      	cmp	r3, r2
 80007e8:	d101      	bne.n	80007ee <GPIO_Init+0x176>
 80007ea:	2308      	movs	r3, #8
 80007ec:	e025      	b.n	800083a <GPIO_Init+0x1c2>
 80007ee:	2300      	movs	r3, #0
 80007f0:	e023      	b.n	800083a <GPIO_Init+0x1c2>
 80007f2:	2307      	movs	r3, #7
 80007f4:	e021      	b.n	800083a <GPIO_Init+0x1c2>
 80007f6:	2306      	movs	r3, #6
 80007f8:	e01f      	b.n	800083a <GPIO_Init+0x1c2>
 80007fa:	2305      	movs	r3, #5
 80007fc:	e01d      	b.n	800083a <GPIO_Init+0x1c2>
 80007fe:	2304      	movs	r3, #4
 8000800:	e01b      	b.n	800083a <GPIO_Init+0x1c2>
 8000802:	2303      	movs	r3, #3
 8000804:	e019      	b.n	800083a <GPIO_Init+0x1c2>
 8000806:	2302      	movs	r3, #2
 8000808:	e017      	b.n	800083a <GPIO_Init+0x1c2>
 800080a:	2301      	movs	r3, #1
 800080c:	e015      	b.n	800083a <GPIO_Init+0x1c2>
 800080e:	bf00      	nop
 8000810:	40013c00 	.word	0x40013c00
 8000814:	40020000 	.word	0x40020000
 8000818:	40020400 	.word	0x40020400
 800081c:	40020800 	.word	0x40020800
 8000820:	40020c00 	.word	0x40020c00
 8000824:	40021000 	.word	0x40021000
 8000828:	40021400 	.word	0x40021400
 800082c:	40021800 	.word	0x40021800
 8000830:	40021c00 	.word	0x40021c00
 8000834:	40022000 	.word	0x40022000
 8000838:	2300      	movs	r3, #0
 800083a:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 800083c:	4b59      	ldr	r3, [pc, #356]	@ (80009a4 <GPIO_Init+0x32c>)
 800083e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000840:	4a58      	ldr	r2, [pc, #352]	@ (80009a4 <GPIO_Init+0x32c>)
 8000842:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000846:	6453      	str	r3, [r2, #68]	@ 0x44
		SYSCFG->EXTICR[temp1] = portcode << ( temp2 * 4);
 8000848:	7c7a      	ldrb	r2, [r7, #17]
 800084a:	7cbb      	ldrb	r3, [r7, #18]
 800084c:	009b      	lsls	r3, r3, #2
 800084e:	fa02 f103 	lsl.w	r1, r2, r3
 8000852:	4a55      	ldr	r2, [pc, #340]	@ (80009a8 <GPIO_Init+0x330>)
 8000854:	7cfb      	ldrb	r3, [r7, #19]
 8000856:	3302      	adds	r3, #2
 8000858:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3 . enable the exti interrupt delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 800085c:	4b53      	ldr	r3, [pc, #332]	@ (80009ac <GPIO_Init+0x334>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	687a      	ldr	r2, [r7, #4]
 8000862:	7912      	ldrb	r2, [r2, #4]
 8000864:	4611      	mov	r1, r2
 8000866:	2201      	movs	r2, #1
 8000868:	408a      	lsls	r2, r1
 800086a:	4611      	mov	r1, r2
 800086c:	4a4f      	ldr	r2, [pc, #316]	@ (80009ac <GPIO_Init+0x334>)
 800086e:	430b      	orrs	r3, r1
 8000870:	6013      	str	r3, [r2, #0]
	}

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	799b      	ldrb	r3, [r3, #6]
 8000876:	461a      	mov	r2, r3
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	791b      	ldrb	r3, [r3, #4]
 800087c:	005b      	lsls	r3, r3, #1
 800087e:	fa02 f303 	lsl.w	r3, r2, r3
 8000882:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	689a      	ldr	r2, [r3, #8]
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	791b      	ldrb	r3, [r3, #4]
 800088e:	005b      	lsls	r3, r3, #1
 8000890:	2103      	movs	r1, #3
 8000892:	fa01 f303 	lsl.w	r3, r1, r3
 8000896:	43db      	mvns	r3, r3
 8000898:	4619      	mov	r1, r3
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	400a      	ands	r2, r1
 80008a0:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	6899      	ldr	r1, [r3, #8]
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	697a      	ldr	r2, [r7, #20]
 80008ae:	430a      	orrs	r2, r1
 80008b0:	609a      	str	r2, [r3, #8]

	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	79db      	ldrb	r3, [r3, #7]
 80008b6:	461a      	mov	r2, r3
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	791b      	ldrb	r3, [r3, #4]
 80008bc:	005b      	lsls	r3, r3, #1
 80008be:	fa02 f303 	lsl.w	r3, r2, r3
 80008c2:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	68da      	ldr	r2, [r3, #12]
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	791b      	ldrb	r3, [r3, #4]
 80008ce:	005b      	lsls	r3, r3, #1
 80008d0:	2103      	movs	r1, #3
 80008d2:	fa01 f303 	lsl.w	r3, r1, r3
 80008d6:	43db      	mvns	r3, r3
 80008d8:	4619      	mov	r1, r3
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	400a      	ands	r2, r1
 80008e0:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	68d9      	ldr	r1, [r3, #12]
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	697a      	ldr	r2, [r7, #20]
 80008ee:	430a      	orrs	r2, r1
 80008f0:	60da      	str	r2, [r3, #12]


	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	7a1b      	ldrb	r3, [r3, #8]
 80008f6:	461a      	mov	r2, r3
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	791b      	ldrb	r3, [r3, #4]
 80008fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000900:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	685a      	ldr	r2, [r3, #4]
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	791b      	ldrb	r3, [r3, #4]
 800090c:	4619      	mov	r1, r3
 800090e:	2301      	movs	r3, #1
 8000910:	408b      	lsls	r3, r1
 8000912:	43db      	mvns	r3, r3
 8000914:	4619      	mov	r1, r3
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	400a      	ands	r2, r1
 800091c:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	6859      	ldr	r1, [r3, #4]
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	697a      	ldr	r2, [r7, #20]
 800092a:	430a      	orrs	r2, r1
 800092c:	605a      	str	r2, [r3, #4]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	795b      	ldrb	r3, [r3, #5]
 8000932:	2b02      	cmp	r3, #2
 8000934:	d131      	bne.n	800099a <GPIO_Init+0x322>
	{
		//configure the alt function registers.
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	791b      	ldrb	r3, [r3, #4]
 800093a:	08db      	lsrs	r3, r3, #3
 800093c:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  % 8;
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	791b      	ldrb	r3, [r3, #4]
 8000942:	f003 0307 	and.w	r3, r3, #7
 8000946:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	7c3a      	ldrb	r2, [r7, #16]
 800094e:	3208      	adds	r2, #8
 8000950:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000954:	7bfb      	ldrb	r3, [r7, #15]
 8000956:	009b      	lsls	r3, r3, #2
 8000958:	220f      	movs	r2, #15
 800095a:	fa02 f303 	lsl.w	r3, r2, r3
 800095e:	43db      	mvns	r3, r3
 8000960:	4618      	mov	r0, r3
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	7c3a      	ldrb	r2, [r7, #16]
 8000968:	4001      	ands	r1, r0
 800096a:	3208      	adds	r2, #8
 800096c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	7c3a      	ldrb	r2, [r7, #16]
 8000976:	3208      	adds	r2, #8
 8000978:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	7a5b      	ldrb	r3, [r3, #9]
 8000980:	461a      	mov	r2, r3
 8000982:	7bfb      	ldrb	r3, [r7, #15]
 8000984:	009b      	lsls	r3, r3, #2
 8000986:	fa02 f303 	lsl.w	r3, r2, r3
 800098a:	4618      	mov	r0, r3
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	7c3a      	ldrb	r2, [r7, #16]
 8000992:	4301      	orrs	r1, r0
 8000994:	3208      	adds	r2, #8
 8000996:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 800099a:	bf00      	nop
 800099c:	3718      	adds	r7, #24
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40023800 	.word	0x40023800
 80009a8:	40013800 	.word	0x40013800
 80009ac:	40013c00 	.word	0x40013c00

080009b0 <App_Timer_Init>:
GP_TIM_Handle_t TimHandle;
GPIO_Handle_t GPIOHandle;

// Initialize application Timer
void App_Timer_Init()
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
	TimHandle.pTIMx = TIM4;
 80009b4:	4b10      	ldr	r3, [pc, #64]	@ (80009f8 <App_Timer_Init+0x48>)
 80009b6:	4a11      	ldr	r2, [pc, #68]	@ (80009fc <App_Timer_Init+0x4c>)
 80009b8:	601a      	str	r2, [r3, #0]
	TimHandle.TIMConfig.TimerMode = GP_TIM_MODE_PWM;
 80009ba:	4b0f      	ldr	r3, [pc, #60]	@ (80009f8 <App_Timer_Init+0x48>)
 80009bc:	2201      	movs	r2, #1
 80009be:	731a      	strb	r2, [r3, #12]
	TimHandle.TIMConfig.ClockSource = GP_TIM_CK_INT;		// Internal clock 16 Mhz
 80009c0:	4b0d      	ldr	r3, [pc, #52]	@ (80009f8 <App_Timer_Init+0x48>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	711a      	strb	r2, [r3, #4]
	TimHandle.TIMConfig.CounterMode = GP_TIM_CNT_MODE_UP;
 80009c6:	4b0c      	ldr	r3, [pc, #48]	@ (80009f8 <App_Timer_Init+0x48>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	735a      	strb	r2, [r3, #13]
	TimHandle.TIMConfig.Prescaler = TIM4_PSC - 1;
 80009cc:	4b0a      	ldr	r3, [pc, #40]	@ (80009f8 <App_Timer_Init+0x48>)
 80009ce:	f240 623f 	movw	r2, #1599	@ 0x63f
 80009d2:	80da      	strh	r2, [r3, #6]
	TimHandle.TIMConfig.Autorealod = TIM4_ARR - 1;
 80009d4:	4b08      	ldr	r3, [pc, #32]	@ (80009f8 <App_Timer_Init+0x48>)
 80009d6:	2263      	movs	r2, #99	@ 0x63
 80009d8:	609a      	str	r2, [r3, #8]
	TimHandle.TIMConfig.Channel = GP_TIM_CHAN_1;
 80009da:	4b07      	ldr	r3, [pc, #28]	@ (80009f8 <App_Timer_Init+0x48>)
 80009dc:	2200      	movs	r2, #0
 80009de:	739a      	strb	r2, [r3, #14]
	TimHandle.TIMConfig.PWMMode = GP_TIM_PWM_MODE_1;
 80009e0:	4b05      	ldr	r3, [pc, #20]	@ (80009f8 <App_Timer_Init+0x48>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	73da      	strb	r2, [r3, #15]
	TimHandle.TIMConfig.Pulse = TIM4_ARR / 10;
 80009e6:	4b04      	ldr	r3, [pc, #16]	@ (80009f8 <App_Timer_Init+0x48>)
 80009e8:	220a      	movs	r2, #10
 80009ea:	611a      	str	r2, [r3, #16]

	GP_TIM_Init(&TimHandle);
 80009ec:	4802      	ldr	r0, [pc, #8]	@ (80009f8 <App_Timer_Init+0x48>)
 80009ee:	f7ff fc59 	bl	80002a4 <GP_TIM_Init>
}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	2000001c 	.word	0x2000001c
 80009fc:	40000800 	.word	0x40000800

08000a00 <App_GPIO_Init>:

// Initialize application GPIO
void App_GPIO_Init()
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
	GPIOHandle.pGPIOx = GPIOD;
 8000a04:	4b0c      	ldr	r3, [pc, #48]	@ (8000a38 <App_GPIO_Init+0x38>)
 8000a06:	4a0d      	ldr	r2, [pc, #52]	@ (8000a3c <App_GPIO_Init+0x3c>)
 8000a08:	601a      	str	r2, [r3, #0]
	GPIOHandle.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000a0a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a38 <App_GPIO_Init+0x38>)
 8000a0c:	2202      	movs	r2, #2
 8000a0e:	715a      	strb	r2, [r3, #5]
	GPIOHandle.GPIO_PinConfig.GPIO_PinAltFunMode = 2;
 8000a10:	4b09      	ldr	r3, [pc, #36]	@ (8000a38 <App_GPIO_Init+0x38>)
 8000a12:	2202      	movs	r2, #2
 8000a14:	725a      	strb	r2, [r3, #9]
	GPIOHandle.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000a16:	4b08      	ldr	r3, [pc, #32]	@ (8000a38 <App_GPIO_Init+0x38>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	721a      	strb	r2, [r3, #8]
	GPIOHandle.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000a1c:	4b06      	ldr	r3, [pc, #24]	@ (8000a38 <App_GPIO_Init+0x38>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	71da      	strb	r2, [r3, #7]
	GPIOHandle.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_MEDIUM;
 8000a22:	4b05      	ldr	r3, [pc, #20]	@ (8000a38 <App_GPIO_Init+0x38>)
 8000a24:	2201      	movs	r2, #1
 8000a26:	719a      	strb	r2, [r3, #6]
	GPIOHandle.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 8000a28:	4b03      	ldr	r3, [pc, #12]	@ (8000a38 <App_GPIO_Init+0x38>)
 8000a2a:	220c      	movs	r2, #12
 8000a2c:	711a      	strb	r2, [r3, #4]

	GPIO_Init(&GPIOHandle);
 8000a2e:	4802      	ldr	r0, [pc, #8]	@ (8000a38 <App_GPIO_Init+0x38>)
 8000a30:	f7ff fe22 	bl	8000678 <GPIO_Init>
}
 8000a34:	bf00      	nop
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	20000030 	.word	0x20000030
 8000a3c:	40020c00 	.word	0x40020c00

08000a40 <main>:

int main(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
	uint8_t pulse = 0;			// To hold pulse value
 8000a46:	2300      	movs	r3, #0
 8000a48:	71fb      	strb	r3, [r7, #7]
	uint8_t incrementing = 1;	// Whether duty cycle is increasing or decreasing
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	71bb      	strb	r3, [r7, #6]
	App_GPIO_Init();
 8000a4e:	f7ff ffd7 	bl	8000a00 <App_GPIO_Init>
	App_Timer_Init();
 8000a52:	f7ff ffad 	bl	80009b0 <App_Timer_Init>

	GP_TIM_Start(&TimHandle);
 8000a56:	4816      	ldr	r0, [pc, #88]	@ (8000ab0 <main+0x70>)
 8000a58:	f7ff fd4a 	bl	80004f0 <GP_TIM_Start>

    /* Loop forever */
	for (;;)
	{
		if (incrementing)
 8000a5c:	79bb      	ldrb	r3, [r7, #6]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d00d      	beq.n	8000a7e <main+0x3e>
		{
			pulse++;
 8000a62:	79fb      	ldrb	r3, [r7, #7]
 8000a64:	3301      	adds	r3, #1
 8000a66:	71fb      	strb	r3, [r7, #7]
			if (pulse == 100)
 8000a68:	79fb      	ldrb	r3, [r7, #7]
 8000a6a:	2b64      	cmp	r3, #100	@ 0x64
 8000a6c:	d101      	bne.n	8000a72 <main+0x32>
			{
				// If reaches maximum value, switch to decrementing state
				incrementing = 0;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	71bb      	strb	r3, [r7, #6]
			}
			GP_TIM_SetPWMPulseWidth(&TimHandle, pulse);
 8000a72:	79fb      	ldrb	r3, [r7, #7]
 8000a74:	4619      	mov	r1, r3
 8000a76:	480e      	ldr	r0, [pc, #56]	@ (8000ab0 <main+0x70>)
 8000a78:	f7ff fd4c 	bl	8000514 <GP_TIM_SetPWMPulseWidth>
 8000a7c:	e00c      	b.n	8000a98 <main+0x58>
		}

		else	// Decrement pulse value
		{
			pulse--;
 8000a7e:	79fb      	ldrb	r3, [r7, #7]
 8000a80:	3b01      	subs	r3, #1
 8000a82:	71fb      	strb	r3, [r7, #7]
			if (pulse == 0)
 8000a84:	79fb      	ldrb	r3, [r7, #7]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d101      	bne.n	8000a8e <main+0x4e>
			{
				// If reaches minimum value, switch to incrementing state
				incrementing = 1;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	71bb      	strb	r3, [r7, #6]
			}
			GP_TIM_SetPWMPulseWidth(&TimHandle, pulse);
 8000a8e:	79fb      	ldrb	r3, [r7, #7]
 8000a90:	4619      	mov	r1, r3
 8000a92:	4807      	ldr	r0, [pc, #28]	@ (8000ab0 <main+0x70>)
 8000a94:	f7ff fd3e 	bl	8000514 <GP_TIM_SetPWMPulseWidth>
		}
		for (uint32_t i = 0; i < 20000; i++);	// Software delay, arbitrary value
 8000a98:	2300      	movs	r3, #0
 8000a9a:	603b      	str	r3, [r7, #0]
 8000a9c:	e002      	b.n	8000aa4 <main+0x64>
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	3301      	adds	r3, #1
 8000aa2:	603b      	str	r3, [r7, #0]
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d9f7      	bls.n	8000a9e <main+0x5e>
		if (incrementing)
 8000aae:	e7d5      	b.n	8000a5c <main+0x1c>
 8000ab0:	2000001c 	.word	0x2000001c

08000ab4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ab4:	480d      	ldr	r0, [pc, #52]	@ (8000aec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ab6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ab8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000abc:	480c      	ldr	r0, [pc, #48]	@ (8000af0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000abe:	490d      	ldr	r1, [pc, #52]	@ (8000af4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ac0:	4a0d      	ldr	r2, [pc, #52]	@ (8000af8 <LoopForever+0xe>)
  movs r3, #0
 8000ac2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ac4:	e002      	b.n	8000acc <LoopCopyDataInit>

08000ac6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ac6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ac8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aca:	3304      	adds	r3, #4

08000acc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000acc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ace:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ad0:	d3f9      	bcc.n	8000ac6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ad2:	4a0a      	ldr	r2, [pc, #40]	@ (8000afc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ad4:	4c0a      	ldr	r4, [pc, #40]	@ (8000b00 <LoopForever+0x16>)
  movs r3, #0
 8000ad6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ad8:	e001      	b.n	8000ade <LoopFillZerobss>

08000ada <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ada:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000adc:	3204      	adds	r2, #4

08000ade <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ade:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ae0:	d3fb      	bcc.n	8000ada <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000ae2:	f000 f811 	bl	8000b08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ae6:	f7ff ffab 	bl	8000a40 <main>

08000aea <LoopForever>:

LoopForever:
  b LoopForever
 8000aea:	e7fe      	b.n	8000aea <LoopForever>
  ldr   r0, =_estack
 8000aec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000af0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000af4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000af8:	08000b70 	.word	0x08000b70
  ldr r2, =_sbss
 8000afc:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000b00:	2000003c 	.word	0x2000003c

08000b04 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b04:	e7fe      	b.n	8000b04 <ADC_IRQHandler>
	...

08000b08 <__libc_init_array>:
 8000b08:	b570      	push	{r4, r5, r6, lr}
 8000b0a:	4d0d      	ldr	r5, [pc, #52]	@ (8000b40 <__libc_init_array+0x38>)
 8000b0c:	4c0d      	ldr	r4, [pc, #52]	@ (8000b44 <__libc_init_array+0x3c>)
 8000b0e:	1b64      	subs	r4, r4, r5
 8000b10:	10a4      	asrs	r4, r4, #2
 8000b12:	2600      	movs	r6, #0
 8000b14:	42a6      	cmp	r6, r4
 8000b16:	d109      	bne.n	8000b2c <__libc_init_array+0x24>
 8000b18:	4d0b      	ldr	r5, [pc, #44]	@ (8000b48 <__libc_init_array+0x40>)
 8000b1a:	4c0c      	ldr	r4, [pc, #48]	@ (8000b4c <__libc_init_array+0x44>)
 8000b1c:	f000 f818 	bl	8000b50 <_init>
 8000b20:	1b64      	subs	r4, r4, r5
 8000b22:	10a4      	asrs	r4, r4, #2
 8000b24:	2600      	movs	r6, #0
 8000b26:	42a6      	cmp	r6, r4
 8000b28:	d105      	bne.n	8000b36 <__libc_init_array+0x2e>
 8000b2a:	bd70      	pop	{r4, r5, r6, pc}
 8000b2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b30:	4798      	blx	r3
 8000b32:	3601      	adds	r6, #1
 8000b34:	e7ee      	b.n	8000b14 <__libc_init_array+0xc>
 8000b36:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b3a:	4798      	blx	r3
 8000b3c:	3601      	adds	r6, #1
 8000b3e:	e7f2      	b.n	8000b26 <__libc_init_array+0x1e>
 8000b40:	08000b68 	.word	0x08000b68
 8000b44:	08000b68 	.word	0x08000b68
 8000b48:	08000b68 	.word	0x08000b68
 8000b4c:	08000b6c 	.word	0x08000b6c

08000b50 <_init>:
 8000b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b52:	bf00      	nop
 8000b54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b56:	bc08      	pop	{r3}
 8000b58:	469e      	mov	lr, r3
 8000b5a:	4770      	bx	lr

08000b5c <_fini>:
 8000b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b5e:	bf00      	nop
 8000b60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b62:	bc08      	pop	{r3}
 8000b64:	469e      	mov	lr, r3
 8000b66:	4770      	bx	lr
